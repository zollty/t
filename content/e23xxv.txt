<p>题干=<br/></p><p>给一台2G内存的服务器，要求处理一个包含30亿个不重复并且没有排过序的无符号的int整数，给出一个整数，问如果快速地判断这个整数是否在文件30亿个数据当中？ 可以用Java、C/C++、Python、JS作答。</p><p>分析=<br/></p><p>&nbsp; &nbsp;30亿个无符号int占（30亿*4）/1024/1024/1024 大概为11.2G左右，很明显内存只有2G，放不下，因此不可能将这30亿数据放到内存中计算。要快速的解决这个问题最好的方案就是将数据搁内存了，所以现在的问题就在如何在2G内存空间以内存储着30亿整数。一个int整数在java中是占4个字节的即要32bit位，如果能够用一个bit位来标识一个int整数那么存储空间将大大减少，无符号整数的范围为 0 ~ 2^32-1，约42亿，也就是需要42亿位的bit数组，需要的内存空间为2^32/8/1024/1024=2^9=512mb，这样的话我们完全可以将这30亿个int数放到内存中进行处理。也就是利用BitMap的思想。<br/></p><p>&nbsp; &nbsp; 注意：在Java语言里面，无符号整数，得用Long才能表示。</p><p>答案=</p><p>&nbsp; &nbsp;1个int占4字节即4*8=32位，即由32个0/1组成，每一位都可以代表对应位置的数字是否存在，例如第三位为1，代表有整数2，否则代表没有整数2……第32位如果为1代表有数字31，……第N+1位如果为1代表有数字N……（此题中N等于无符号整数的最大值，即&nbsp;2^32-1，那么一共需要2^32位 ），如下示例：</p><p>0010000000100000,0010000000100000,0010000000100000……（一共是2^32亿个0/1，只占512mb内存），这个bit数组，可以用 int [2^32/32] 来表示，其中int [0]，就可以表示前32个数字，int [1]表示第33~64个数字。也可以用long [2^32/64]来表示，其中long [0]，就可以表示前64个数字。</p><p>&nbsp; &nbsp;编程的话，Java语言，如果数字范围在0~Integer.MAX_VALUE（大概20多亿）范围内，可以直接用java.util.BitSet类（内部是long数组）。</p><pre class="brush:java;toolbar:false">static&nbsp;int&nbsp;BITSPERWORD&nbsp;=&nbsp;32;
static&nbsp;int&nbsp;len&nbsp;=&nbsp;(int)((1L&lt;&lt;31)/BITSPERWORD);
static&nbsp;BitSet&nbsp;set&nbsp;=&nbsp;new&nbsp;BitSet(len);

public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;Scanner&nbsp;scan&nbsp;=&nbsp;new&nbsp;Scanner(System.in);

&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(scan.hasNextInt())
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set.set(Integer.valueOf(scan.nextLine()));
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;scan.nextLine();
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(scan.hasNextInt())&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;i&nbsp;=&nbsp;Integer.valueOf(scan.nextLine());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(set.get(i))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(i);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;not&nbsp;in!&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;scan.close();
}</pre><p>显然此题的数字已经超出了Integer.MAX_VALUE，不能用java.util.BitSet了。直接用long数组，Java程序如下：</p><pre class="brush:java;toolbar:false">static&nbsp;int&nbsp;BITSPERWORD&nbsp;=&nbsp;64;
static&nbsp;long&nbsp;SHIFT&nbsp;=&nbsp;6L;
static&nbsp;long&nbsp;MASK&nbsp;=&nbsp;0x3F;//&nbsp;=&nbsp;63

static&nbsp;int&nbsp;len&nbsp;=&nbsp;(int)((1L&lt;&lt;32)/BITSPERWORD);
static&nbsp;long&nbsp;a[]&nbsp;=&nbsp;new&nbsp;long[len];//&nbsp;申请内存的大小

//&nbsp;set&nbsp;设置所在的bit位为1
static&nbsp;void&nbsp;set(long&nbsp;i)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;m&nbsp;=&nbsp;(int)&nbsp;(i&nbsp;&gt;&gt;&nbsp;SHIFT);
&nbsp;&nbsp;&nbsp;&nbsp;a[m]&nbsp;|=&nbsp;(1L&nbsp;&lt;&lt;&nbsp;(i&nbsp;&amp;&nbsp;MASK));
}

//&nbsp;test&nbsp;测试所在的bit为是否为1
static&nbsp;long&nbsp;test(long&nbsp;i)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;long&nbsp;m&nbsp;=&nbsp;a[(int)(i&nbsp;&gt;&gt;&nbsp;SHIFT)];
&nbsp;&nbsp;&nbsp;&nbsp;long&nbsp;n&nbsp;=&nbsp;(1L&nbsp;&lt;&lt;&nbsp;(i&nbsp;&amp;&nbsp;MASK));
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;m&nbsp;&amp;&nbsp;n;
}

public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;Scanner&nbsp;scan&nbsp;=&nbsp;new&nbsp;Scanner(System.in);

&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(scan.hasNextLong())
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set(Long.valueOf(scan.nextLine()));
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;scan.nextLine();
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(scan.hasNextLong())&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;long&nbsp;i&nbsp;=&nbsp;Long.valueOf(scan.nextLine());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(test(i)&nbsp;!=&nbsp;0L)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(i);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;not&nbsp;in!&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;scan.close();
}</pre><p>附Java Integer版本（等价于使用java.util.BitSet）：<br/></p><pre class="brush:java;toolbar:false">static&nbsp;int&nbsp;BITSPERWORD&nbsp;=&nbsp;32;
static&nbsp;int&nbsp;SHIFT&nbsp;=&nbsp;5;
static&nbsp;int&nbsp;MASK&nbsp;=&nbsp;0x1F;//&nbsp;=&nbsp;00011111&nbsp;=&nbsp;31

static&nbsp;int&nbsp;len&nbsp;=&nbsp;(int)((1L&lt;&lt;31)/BITSPERWORD);
static&nbsp;int&nbsp;a[]&nbsp;=&nbsp;new&nbsp;int[len];//&nbsp;申请内存的大小

//&nbsp;set&nbsp;设置所在的bit位为1
static&nbsp;void&nbsp;set(int&nbsp;i)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;a[i&nbsp;&gt;&gt;&nbsp;SHIFT]&nbsp;|=&nbsp;(1&nbsp;&lt;&lt;&nbsp;(i&nbsp;&amp;&nbsp;MASK));
}

//&nbsp;clr&nbsp;初始化所有的bit位为0
//&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;void&nbsp;clr(int&nbsp;i)&nbsp;{
//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a[i&nbsp;&gt;&gt;&nbsp;SHIFT]&nbsp;&amp;=&nbsp;~(1L&nbsp;&lt;&lt;&nbsp;(i&nbsp;&amp;&nbsp;MASK));
//&nbsp;&nbsp;&nbsp;&nbsp;}

//&nbsp;test&nbsp;测试所在的bit为是否为1
static&nbsp;int&nbsp;test(int&nbsp;i)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;m&nbsp;=&nbsp;a[i&nbsp;&gt;&gt;&nbsp;SHIFT];
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;n&nbsp;=&nbsp;(1&nbsp;&lt;&lt;&nbsp;(i&nbsp;&amp;&nbsp;MASK));
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;m&nbsp;&amp;&nbsp;n;
}

public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;Scanner&nbsp;scan&nbsp;=&nbsp;new&nbsp;Scanner(System.in);

&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(scan.hasNextInt())
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set(Integer.valueOf(scan.nextLine()));
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;scan.nextLine();
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(scan.hasNextInt())&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;i&nbsp;=&nbsp;Integer.valueOf(scan.nextLine());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(test(i)&nbsp;!=&nbsp;0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(i);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;not&nbsp;in!&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;scan.close();
}</pre><p><br/></p><p>参考资料：</p><p><a href="https://www.cnblogs.com/yangjiannr/p/da-shu-ju-chu-libitmap.html" target="_blank">大数据处理-Bitmap</a> </p><p><a href="https://blog.csdn.net/hguisu/article/details/7880288" target="_blank">海量数据处理算法—Bit-Map</a> </p><p><a href="https://blog.csdn.net/hguisu/article/details/7892596" target="_blank">位运算符及其应用</a> </p><p><br/></p><p><br/></p>