<p><strong>题干=</strong><br/></p><p>使用 typeof bar === &quot;object&quot; 来确定 bar 是否是对象的潜在陷阱是什么？如何避免这个陷阱？<br/></p><p>答案=</p><p>&nbsp;&nbsp;&nbsp;&nbsp;尽管 typeof bar === &quot;object&quot; 是检查 bar 是否对象的可靠方法，令人惊讶的是在JavaScript中 null 也被认为是对象！</p><p>&nbsp;&nbsp;&nbsp;&nbsp;因此，令大多数开发人员惊讶的是，下面的代码将输出 true (而不是false) 到控制台：</p><pre class="brush:js;toolbar:false;">var&nbsp;bar&nbsp;=&nbsp;null;
console.log(typeof&nbsp;bar&nbsp;===&nbsp;&quot;object&quot;);&nbsp;&nbsp;//&nbsp;logs&nbsp;true!</pre><p>&nbsp;&nbsp;&nbsp;&nbsp;只要清楚这一点，同时检查 bar 是否为 null，就可以很容易地避免问题：</p><pre class="brush:js;toolbar:false">console.log((bar&nbsp;!==&nbsp;null)&nbsp;&amp;&amp;&nbsp;(typeof&nbsp;bar&nbsp;===&nbsp;&quot;object&quot;));&nbsp;&nbsp;//&nbsp;logs&nbsp;false</pre><p>&nbsp;&nbsp;&nbsp;&nbsp;补充内容：判断函数和数组</p><p>&nbsp;&nbsp;&nbsp;&nbsp;首先，上述解决方案将返回 false，当 bar 是一个函数的时候。在大多数情况下，这是期望行为，但当你也想对函数返回 true 的话，你可以修改上面的解决方案为：<br/></p><pre class="brush:js;toolbar:false">(typeof&nbsp;bar&nbsp;===&nbsp;&quot;object&quot;)&nbsp;||&nbsp;(typeof&nbsp;bar&nbsp;===&nbsp;&quot;function&quot;)</pre><p>&nbsp;&nbsp;&nbsp;&nbsp;第二，上述解决方案将返回 true，当 bar 是一个数组（例如，当 var bar = [];）的时候。在大多数情况下，这是期望行为，因为数组是真正的对象，但当你也想对数组返回 false 时，你可以修改上面的解决方案为：</p><pre class="brush:js;toolbar:false">(typeof&nbsp;bar&nbsp;===&nbsp;&quot;object&quot;)&nbsp;&amp;&amp;&nbsp;(toString.call(bar)&nbsp;!==&nbsp;&quot;[object&nbsp;Array]&quot;)</pre><p>&nbsp;&nbsp;&nbsp;&nbsp;或者，如果你使用jQuery的话：</p><pre class="brush:js;toolbar:false">(typeof&nbsp;bar&nbsp;===&nbsp;&quot;object&quot;)&nbsp;&amp;&amp;&nbsp;(!&nbsp;$.isArray(bar))</pre><p><br/></p><p>题干=</p><p>下面的代码将输出什么到控制台，为什么？</p><pre class="brush:js;toolbar:false">(function(){
&nbsp;&nbsp;var&nbsp;a&nbsp;=&nbsp;b&nbsp;=&nbsp;3;
})();
console.log(&quot;a&nbsp;defined?&nbsp;&quot;&nbsp;+&nbsp;(typeof&nbsp;a&nbsp;!==&nbsp;&#39;undefined&#39;));
console.log(&quot;b&nbsp;defined?&nbsp;&quot;&nbsp;+&nbsp;(typeof&nbsp;b&nbsp;!==&nbsp;&#39;undefined&#39;));</pre><p>答案=</p><p>&nbsp;&nbsp;&nbsp;&nbsp;由于 a 和 b 都定义在函数的封闭范围内，并且都始于 var关键字，大多数JavaScript开发人员期望 typeof a 和 typeof b 在上面的例子中都是undefined。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;然而，事实并非如此。这里的问题是，大多数开发人员将语句 var a = b = 3; 错误地理解为是以下声明的简写：</p><pre class="brush:js;toolbar:false">var&nbsp;b&nbsp;=&nbsp;3;
var&nbsp;a&nbsp;=&nbsp;b;</pre><p>但事实上，var a = b = 3; 实际是以下声明的简写：</p><pre class="brush:js;toolbar:false">b&nbsp;=&nbsp;3;
var&nbsp;a&nbsp;=&nbsp;b;</pre><p>因此（如果你不使用严格模式的话），该代码段的输出是：</p><pre class="brush:js;toolbar:false">a&nbsp;defined?&nbsp;false
b&nbsp;defined?&nbsp;true</pre><p>&nbsp;&nbsp;&nbsp;&nbsp;但是， b 如何才能被定义在封闭函数的范围之外呢？是的，既然语句 var a = b = 3; 是语句 b = 3; 和 var a = b;的简写， b 最终成为了一个全局变量（因为它没有前缀 var 关键字），因此仍然在范围内甚至封闭函数之外。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;需要注意的是，在严格模式下（即使用 use strict），语句var a = b = 3; 将生成ReferenceError: b is not defined的运行时错误，从而避免任何否则可能会导致的headfakes /bug。 （还是你为什么应该理所当然地在代码中使用 use strict 的最好例子！）</p><p><br/></p><p>题干=</p><p>下面的代码将输出什么到控制台，为什么？</p><pre class="brush:js;toolbar:false">var&nbsp;myObject&nbsp;=&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;foo:&nbsp;&quot;bar&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;func:&nbsp;function()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;self&nbsp;=&nbsp;this;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;outer&nbsp;func:&nbsp;&nbsp;this.foo&nbsp;=&nbsp;&quot;&nbsp;+&nbsp;this.foo);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;outer&nbsp;func:&nbsp;&nbsp;self.foo&nbsp;=&nbsp;&quot;&nbsp;+&nbsp;self.foo);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(function()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;inner&nbsp;func:&nbsp;&nbsp;this.foo&nbsp;=&nbsp;&quot;&nbsp;+&nbsp;this.foo);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;inner&nbsp;func:&nbsp;&nbsp;self.foo&nbsp;=&nbsp;&quot;&nbsp;+&nbsp;self.foo);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}());
&nbsp;&nbsp;&nbsp;&nbsp;}
};
myObject.func();</pre><p>答案=</p><p>&nbsp;&nbsp;&nbsp;&nbsp;上面的代码将输出以下内容到控制台：</p><p>outer func:&nbsp; this.foo = bar</p><p>outer func:&nbsp; self.foo = bar</p><p>inner func:&nbsp; this.foo = undefined</p><p>inner func:&nbsp; self.foo = bar</p><p>&nbsp;&nbsp;&nbsp;&nbsp;在外部函数中， this 和self 两者都指向了 myObject，因此两者都可以正确地引用和访问 foo。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;在内部函数中， this 不再指向 myObject。其结果是，this.foo 没有在内部函数中被定义，相反，指向到本地的变量self 保持在范围内，并且可以访问。 （在ECMA 5之前，在内部函数中的this 将指向全局的 window 对象；反之，因为作为ECMA 5，内部函数中的功能this 是未定义的。）</p><p><br/></p><p>题干=</p><p>封装JavaScript源文件的全部内容到一个函数块有什么意义及理由？</p><p>答案=</p><p>&nbsp;&nbsp;&nbsp;&nbsp;这是一个越来越普遍的做法，被许多流行的JavaScript库（jQuery，Node.js等）采用。这种技术创建了一个围绕文件全部内容的闭包，也许是最重要的是，创建了一个私有的命名空间，从而有助于避免不同JavaScript模块和库之间潜在的名称冲突。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;这种技术的另一个特点是，允许一个易于引用的（假设更短的）别名用于全局变量。这通常用于，例如，jQuery插件中。jQuery允许你使用jQuery.noConflict()，来禁用 $ 引用到jQuery命名空间。在完成这项工作之后，你的代码仍然可以使用$ 利用这种闭包技术，如下所示：</p><pre class="brush:js;toolbar:false">(function($)&nbsp;{&nbsp;/*&nbsp;jQuery&nbsp;plugin&nbsp;code&nbsp;referencing&nbsp;$&nbsp;*/&nbsp;}&nbsp;)(jQuery);</pre><p><br/></p><p>题干=</p><p>在JavaScript源文件的开头包含 use strict 有什么意义和好处？</p><p>答案=</p><p>&nbsp;&nbsp;&nbsp;&nbsp;对于这个问题，既简要又最重要的答案是，use strict 是一种在JavaScript代码运行时自动实行更严格解析和错误处理的方法。那些被忽略或默默失败了的代码错误，会产生错误或抛出异常。通常而言，这是一个很好的做法。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;严格模式的一些主要优点包括：<br/></p><ol class=" list-paddingleft-2" style="list-style-type: decimal;"><li><p>&nbsp;使调试更加容易。那些被忽略或默默失败了的代码错误，会产生错误或抛出异常，因此尽早提醒你代码中的问题，你才能更快地指引到它们的源代码。<br/></p></li><li><p>防止意外的全局变量。如果没有严格模式，将值分配给一个未声明的变量会自动创建该名称的全局变量。这是JavaScript中最常见的错误之一。在严格模式下，这样做的话会抛出错误。</p></li><li><p>&nbsp;消除 this 强制。如果没有严格模式，引用null或未定义的值到 this 值会自动强制到全局变量。这可能会导致许多令人头痛的问题和让人恨不得拔自己头发的bug。在严格模式下，引用 null或未定义的 this 值会抛出错误。</p></li><li><p>&nbsp;不允许重复的属性名称或参数值。当检测到对象（例如，var object = {foo: &quot;bar&quot;, foo: &quot;baz&quot;};）中重复命名的属性，或检测到函数中（例如，function foo(val1, val2, val1){}）重复命名的参数时，严格模式会抛出错误，因此捕捉几乎可以肯定是代码中的bug可以避免浪费大量的跟踪时间。</p></li><li><p>&nbsp;使eval() 更安全。在严格模式和非严格模式下，eval() 的行为方式有所不同。最显而易见的是，在严格模式下，变量和声明在 eval() 语句内部的函数不会在包含范围内创建（它们会在非严格模式下的包含范围中被创建，这也是一个常见的问题源）。</p></li><li><p>&nbsp;在 delete使用无效时抛出错误。delete操作符（用于从对象中删除属性）不能用在对象不可配置的属性上。当试图删除一个不可配置的属性时，非严格代码将默默地失败，而严格模式将在这样的情况下抛出异常。</p></li></ol><p><br/></p><p>题干=</p><p>考虑以下两个函数。它们会返回相同的东西吗？ 为什么相同或为什么不相同？</p><pre class="brush:js;toolbar:false">function&nbsp;foo1()
{
&nbsp;&nbsp;return&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bar:&nbsp;&quot;hello&quot;
&nbsp;&nbsp;};
}

function&nbsp;foo2()
{
&nbsp;&nbsp;return
&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bar:&nbsp;&quot;hello&quot;
&nbsp;&nbsp;};
}</pre><p>答案=</p><p>出人意料的是，这两个函数返回的内容并不相同。更确切地说是：</p><pre class="brush:js;toolbar:false">console.log(&quot;foo1&nbsp;returns:&quot;);
console.log(foo1());
console.log(&quot;foo2&nbsp;returns:&quot;);
console.log(foo2());</pre><p>将产生：</p><pre class="brush:js;toolbar:false">foo1&nbsp;returns:
Object&nbsp;{bar:&nbsp;&quot;hello&quot;}
foo2&nbsp;returns:
undefined</pre><p>&nbsp;&nbsp;&nbsp;&nbsp;这不仅是令人惊讶，而且特别让人困惑的是， foo2()返回undefined却没有任何错误抛出。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;原因与这样一个事实有关，即分号在JavaScript中是一个可选项（尽管省略它们通常是非常糟糕的形式）。其结果就是，当碰到 foo2()中包含 return语句的代码行（代码行上没有其他任何代码），分号会立即自动插入到返回语句之后。<br/></p><p>&nbsp;&nbsp;&nbsp;&nbsp;也不会抛出错误，因为代码的其余部分是完全有效的，即使它没有得到调用或做任何事情（相当于它就是是一个未使用的代码块，定义了等同于字符串 &quot;hello&quot;的属性 bar）。<br/></p><p>&nbsp;&nbsp;&nbsp;&nbsp;这种行为也支持放置左括号于JavaScript代码行的末尾，而不是新代码行开头的约定。正如这里所示，这不仅仅只是JavaScript中的一个风格偏好。<br/></p><p><br/></p><p>题干=</p><p>NaN 是什么？它的类型是什么？你如何可靠地测试一个值是否等于 NaN ？</p><p>答案=</p><p>&nbsp;&nbsp;&nbsp;&nbsp;NaN 属性代表一个“不是数字”的值。这个特殊的值是因为运算不能执行而导致的，不能执行的原因要么是因为其中的运算对象之一非数字（例如， &quot;abc&quot; / 4），要么是因为运算的结果非数字（例如，除数为零）。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;虽然这看上去很简单，但 NaN 有一些令人惊讶的特点，如果你不知道它们的话，可能会导致令人头痛的bug。<br/></p><p>&nbsp;&nbsp;&nbsp;&nbsp;首先，虽然 NaN 意味着“不是数字”，但是它的类型，不管你信不信，是 Number：</p><pre class="brush:js;toolbar:false">console.log(typeof&nbsp;NaN&nbsp;===&nbsp;&quot;number&quot;);&nbsp;&nbsp;//&nbsp;logs&nbsp;&quot;true&quot;</pre><p>&nbsp;&nbsp;&nbsp;&nbsp;此外， NaN 和任何东西比较——甚至是它自己本身！——结果是false：</p><pre class="brush:js;toolbar:false">console.log(NaN&nbsp;===&nbsp;NaN);&nbsp;&nbsp;//&nbsp;logs&nbsp;&quot;false&quot;</pre><p>&nbsp;&nbsp;&nbsp;&nbsp;一种半可靠的方法来测试一个数字是否等于 NaN，是使用内置函数 isNaN()，但即使使用 isNaN() 依然并非是一个完美的解决方案。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;一个更好的解决办法是使用 value !== value，如果值等于NaN，只会产生true。另外，ES6提供了一个新的 Number.isNaN() 函数，这是一个不同的函数，并且比老的全局 isNaN() 函数更可靠。</p><p><br/></p><p>题干=</p><p>下列代码将输出什么？并解释原因。</p><pre class="brush:js;toolbar:false">console.log(0.1&nbsp;+&nbsp;0.2);
console.log(0.1&nbsp;+&nbsp;0.2&nbsp;==&nbsp;0.3);</pre><p>答案=</p><p>&nbsp; &nbsp; 很多编程语言对于浮点数的处理，都会有一个精度问题，两个看似相同的浮点数（小数），由于计算时有精度的存在，不可能是完全相等的。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;例如，上面的程序输出：</p><pre class="brush:js;toolbar:false">0.30000000000000004
false</pre><p><br/></p><p>题干=</p><p>如何判断x是否为整数？讨论写函数 isInteger(x) 的可能方法，用于确定x是否是整数。</p><p>答案=</p><p>&nbsp;&nbsp;&nbsp;&nbsp;这可能听起来是小菜一碟，但事实上，这很琐碎，因为ECMAScript 6引入了一个新的正以此为目的 Number.isInteger() 函数。然而，之前的ECMAScript 6，会更复杂一点，因为没有提供类似的 Number.isInteger() 方法。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;问题是，在ECMAScript规格说明中，整数只概念上存在：即，数字值总是存储为浮点值。<br/></p><p>&nbsp;&nbsp;&nbsp;&nbsp;考虑到这一点，最简单又最干净的ECMAScript6之前的解决方法（同时也非常稳健地返回 false ，即使一个非数字的值，如字符串或 null ，被传递给函数）如下：<br/></p><pre class="brush:js;toolbar:false">function&nbsp;isInteger(x)&nbsp;{&nbsp;return&nbsp;(x^0)&nbsp;===&nbsp;x;&nbsp;}</pre><p>&nbsp;&nbsp;&nbsp;&nbsp;下面的解决方法也是可行的，虽然不如上面那个方法优雅：</p><pre class="brush:js;toolbar:false">function&nbsp;isInteger(x)&nbsp;{&nbsp;return&nbsp;Math.round(x)&nbsp;===&nbsp;x;&nbsp;}</pre><p>&nbsp;&nbsp;&nbsp;&nbsp;请注意 Math.ceil() 和 Math.floor() 在上面的实现中等同于 Math.round()。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;或：</p><pre class="brush:js;toolbar:false">function&nbsp;isInteger(x)&nbsp;{&nbsp;return&nbsp;(typeof&nbsp;x&nbsp;===&nbsp;&#39;number&#39;)&nbsp;&amp;&amp;&nbsp;(x&nbsp;%&nbsp;1&nbsp;===&nbsp;0);</pre><p>&nbsp;&nbsp;&nbsp;&nbsp;相当普遍的一个<span style="text-decoration: underline;">不正确</span>的解决方案是：</p><pre class="brush:js;toolbar:false">function&nbsp;isInteger(x)&nbsp;{&nbsp;return&nbsp;parseInt(x,&nbsp;10)&nbsp;===&nbsp;x;&nbsp;}</pre><p>&nbsp;&nbsp;&nbsp;&nbsp;虽然这个以 parseInt函数为基础的方法在 x 取许多值时都能工作良好，但一旦 x 取值相当大的时候，就会无法正常工作。问题在于 parseInt() 在解析数字之前强制其第一个参数到字符串。因此，一旦数目变得足够大，它的字符串就会表达为指数形式（例如， 1e+21）。因此，parseInt() 函数就会去解析 1e+21，但当到达 e字符串的时候，就会停止解析，因此只会返回值 1。</p><p><br/></p><p>题干=</p><p>下列代码的输出是什么，为什么？</p><pre class="brush:js;toolbar:false">(function()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;console.log(1);&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;setTimeout(function(){console.log(2)},&nbsp;1000);&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;setTimeout(function(){console.log(3)},&nbsp;0);&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;console.log(4);
})();</pre><p>答案=</p><p>输出为：1、4、3、2</p><p>让我们先来解释比较明显而易见的那部分：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;1 和 4之所以放在前面，是因为它们是通过简单调用 console.log() 而没有任何延迟输出的<br/></p><p>&nbsp;&nbsp;&nbsp;&nbsp;2 之所以放在 3的后面，是因为 2 是延迟了1000毫秒（即，1秒）之后输出的，而 3 是延迟了0毫秒之后输出的。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;好的。但是，既然 3 是0毫秒延迟之后输出的，那么是否意味着它是立即输出的呢？如果是的话，那么它是不是应该在 4 之前输出，既然 4 是在第二行输出的？</p><p>&nbsp;&nbsp;&nbsp;&nbsp;要回答这个问题，你需要正确理解JavaScript的事件和时间设置。<br/></p><p>&nbsp;&nbsp;&nbsp;&nbsp;浏览器有一个事件循环，会检查事件队列和处理未完成的事件。例如，如果时间发生在后台（例如，脚本的 onload 事件）时，浏览器正忙（例如，处理一个 onclick），那么事件会添加到队列中。当onclick处理程序完成后，检查队列，然后处理该事件（例如，执行 onload 脚本）。<br/></p><p>&nbsp;&nbsp;&nbsp;&nbsp;同样的， setTimeout() 也会把其引用的函数的执行放到事件队列中，如果浏览器正忙的话。<br/></p><p>&nbsp;&nbsp;&nbsp;&nbsp;当setTimeout()的第二个参数为0的时候，它的意思是<span style="text-decoration: underline;">“尽快”执行指定的函数</span>。具体而言，函数的执行会放置在事件队列的下一个计时器开始。但是请注意，这不是立即执行：函数不会被执行除非下一个计时器开始。这就是为什么在上述的例子中，调用 console.log(4) 发生在调用 console.log(3) 之前（因为调用 console.log(3) 是通过setTimeout被调用的，因此会<span style="text-decoration: underline;">稍微延迟</span>）。<br/></p><p><br/></p><p>题干=</p><p>写一个 sum方法，在使用下面任一语法调用时，都可以正常工作。</p><pre class="brush:js;toolbar:false">console.log(sum(2,3));&nbsp;&nbsp;&nbsp;//&nbsp;Outputs&nbsp;5
console.log(sum(2)(3));&nbsp;&nbsp;//&nbsp;Outputs&nbsp;5</pre><p>答案=</p><p>（至少）有两种方法可以做到：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;方法1</p><pre class="brush:js;toolbar:false">function&nbsp;sum(x)&nbsp;{
&nbsp;&nbsp;if&nbsp;(arguments.length&nbsp;==&nbsp;2)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;arguments[0]&nbsp;+&nbsp;arguments[1];
&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;function(y)&nbsp;{&nbsp;return&nbsp;x&nbsp;+&nbsp;y;&nbsp;};
&nbsp;&nbsp;}
}</pre><p>&nbsp;&nbsp;&nbsp;&nbsp;在JavaScript中，函数可以提供到 arguments 对象的访问，arguments 对象提供传递到函数的实际参数的访问。这使我们能够使用 length 属性来确定在运行时传递给函数的参数数量。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;如果传递两个参数，那么只需加在一起，并返回。否则，我们假设它被以 sum(2)(3)这样的形式调用，所以我们返回一个匿名函数，这个匿名函数合并了传递到 sum()的参数和传递给匿名函数的参数。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;方法2</p><pre class="brush:js;toolbar:false">function&nbsp;sum(x,&nbsp;y)&nbsp;{
&nbsp;&nbsp;if&nbsp;(y&nbsp;!==&nbsp;undefined)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;x&nbsp;+&nbsp;y;
&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;function(y)&nbsp;{&nbsp;return&nbsp;x&nbsp;+&nbsp;y;&nbsp;};
&nbsp;&nbsp;}
}</pre><p>&nbsp;&nbsp;&nbsp;&nbsp;当调用一个函数的时候，JavaScript不要求参数的数目匹配函数定义中的参数数量。如果传递的参数数量大于函数定义中参数数量，那么多余参数将简单地被忽略。另一方面，如果传递的参数数量小于函数定义中的参数数量，那么缺少的参数在函数中被引用时将会给一个 undefined值。所以，在上面的例子中，简单地检查第2个参数是否未定义，就可以相应地确定函数被调用以及进行的方式。</p><p><br/></p><p>题干=</p><p>JavaScript中的“闭包”是什么？请举一个例子。</p><p>答案=</p><p>闭包是一个可以访问外部（封闭）函数作用域链中的变量的内部函数。闭包可以访问三种范围中的变量：这三个范围具体为：（1）自己范围内的变量，（2）封闭函数范围内的变量，以及（3）全局变量。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;下面是一个简单的例子：</p><pre class="brush:js;toolbar:false">var&nbsp;globalVar&nbsp;=&nbsp;&quot;xyz&quot;;
&nbsp;
(function&nbsp;outerFunc(outerArg)&nbsp;{
&nbsp;&nbsp;var&nbsp;outerVar&nbsp;=&nbsp;&#39;a&#39;;
&nbsp;
&nbsp;&nbsp;(function&nbsp;innerFunc(innerArg)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;innerVar&nbsp;=&nbsp;&#39;b&#39;;
&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;console.log(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;outerArg&nbsp;=&nbsp;&quot;&nbsp;+&nbsp;outerArg&nbsp;+&nbsp;&quot;n&quot;&nbsp;+
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;innerArg&nbsp;=&nbsp;&quot;&nbsp;+&nbsp;innerArg&nbsp;+&nbsp;&quot;n&quot;&nbsp;+
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;outerVar&nbsp;=&nbsp;&quot;&nbsp;+&nbsp;outerVar&nbsp;+&nbsp;&quot;n&quot;&nbsp;+
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;innerVar&nbsp;=&nbsp;&quot;&nbsp;+&nbsp;innerVar&nbsp;+&nbsp;&quot;n&quot;&nbsp;+
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;globalVar&nbsp;=&nbsp;&quot;&nbsp;+&nbsp;globalVar);
&nbsp;
&nbsp;&nbsp;})(456);
})(123);</pre><p>&nbsp;&nbsp;&nbsp;&nbsp;在上面的例子中，来自于 innerFunc， outerFunc和全局命名空间的变量都在 innerFunc的范围内。因此，上面的代码将输出如下：</p><pre class="brush:js;toolbar:false">outerArg&nbsp;=&nbsp;123
innerArg&nbsp;=&nbsp;456
outerVar&nbsp;=&nbsp;a
innerVar&nbsp;=&nbsp;b
globalVar&nbsp;=&nbsp;xyz</pre><p><br/></p><p>题干=</p><p>下面的代码将输出什么：</p><pre class="brush:js;toolbar:false">for&nbsp;(var&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;5;&nbsp;i++)&nbsp;{
&nbsp;&nbsp;setTimeout(function()&nbsp;{&nbsp;console.log(i);&nbsp;},&nbsp;i&nbsp;*&nbsp;1000&nbsp;);
}</pre><p>解释你的答案。闭包在这里能起什么作用？</p><p>答案=</p><p>&nbsp;&nbsp;&nbsp;&nbsp;上面的代码不会按预期显示值0，1，2，3，和4，而是会显示5，5，5，5，和5。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;原因是，在循环中执行的每个函数将整个循环完成之后被执行，因此，将会引用存储在 i中的最后一个值，那就是5。<br/></p><p>&nbsp;&nbsp;&nbsp;&nbsp;闭包可以通过为每次迭代创建一个唯一的范围，存储范围内变量的每个唯一的值，来防止这个问题，如下：</p><pre class="brush:js;toolbar:false">for&nbsp;(var&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;5;&nbsp;i++)&nbsp;{
(function(x)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;setTimeout(function()&nbsp;{&nbsp;console.log(x);&nbsp;},&nbsp;x&nbsp;*&nbsp;1000&nbsp;);
&nbsp;&nbsp;&nbsp;&nbsp;})(i);
}</pre><p>&nbsp;&nbsp;&nbsp;&nbsp;这就会按预期输出0，1，2，3，和4到控制台。</p><p><br/></p><p>题干=</p><p>请看下面的代码片段：</p><pre class="brush:js;toolbar:false">for&nbsp;(var&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;5;&nbsp;i++)&nbsp;{
&nbsp;&nbsp;var&nbsp;btn&nbsp;=&nbsp;document.createElement(&#39;button&#39;);
&nbsp;&nbsp;btn.appendChild(document.createTextNode(&#39;Button&nbsp;&#39;&nbsp;+&nbsp;i));
&nbsp;&nbsp;btn.addEventListener(&#39;click&#39;,&nbsp;function(){&nbsp;console.log(i);&nbsp;});
&nbsp;&nbsp;document.body.appendChild(btn);
}</pre><p>（a）当用户点击“Button 4”的时候会输出什么到控制台，为什么？</p><p>（b）提供一个或多个备用的可按预期工作的实现方案。</p><p>答案=</p><p>（a）无论用户点击什么按钮，数字5将总会输出到控制台。这是因为，当 onclick 方法被调用（对于任何按钮）的时候， for 循环已经结束，变量 i 已经获得了5的值。（面试者如果能够谈一谈有关如何执行上下文，可变对象，激活对象和内部“范围”属性贡有助于<span style="text-decoration: underline;">闭包</span>行为，则可以加分）。</p><p>（b）要让代码工作的关键是，通过传递到一个新创建的函数对象，在每次传递通过 for 循环时，捕捉到 i 值。下面是三种可能实现的方法：</p><pre class="brush:js;toolbar:false">for&nbsp;(var&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;5;&nbsp;i++)&nbsp;{
&nbsp;&nbsp;var&nbsp;btn&nbsp;=&nbsp;document.createElement(&#39;button&#39;);
&nbsp;&nbsp;btn.appendChild(document.createTextNode(&#39;Button&nbsp;&#39;&nbsp;+&nbsp;i));
&nbsp;&nbsp;btn.addEventListener(&#39;click&#39;,&nbsp;(function(i)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;function()&nbsp;{&nbsp;console.log(i);&nbsp;};
&nbsp;&nbsp;})(i));
&nbsp;&nbsp;document.body.appendChild(btn);
}</pre><p>&nbsp;&nbsp;&nbsp;&nbsp;或者，你可以封装全部调用到在新匿名函数中的 btn.addEventListener ：</p><pre class="brush:js;toolbar:false">for&nbsp;(var&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;5;&nbsp;i++)&nbsp;{
&nbsp;&nbsp;var&nbsp;btn&nbsp;=&nbsp;document.createElement(&#39;button&#39;);
&nbsp;&nbsp;btn.appendChild(document.createTextNode(&#39;Button&nbsp;&#39;&nbsp;+&nbsp;i));
&nbsp;&nbsp;(function&nbsp;(i)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;btn.addEventListener(&#39;click&#39;,&nbsp;function()&nbsp;{&nbsp;console.log(i);&nbsp;});
&nbsp;&nbsp;})(i);
&nbsp;&nbsp;document.body.appendChild(btn);
}</pre><p>&nbsp;&nbsp;&nbsp;&nbsp;也可以调用数组对象的本地 forEach 方法来替代 for 循环：</p><pre class="brush:js;toolbar:false">[&#39;a&#39;,&nbsp;&#39;b&#39;,&nbsp;&#39;c&#39;,&nbsp;&#39;d&#39;,&nbsp;&#39;e&#39;].forEach(function&nbsp;(value,&nbsp;i)&nbsp;{
&nbsp;&nbsp;var&nbsp;btn&nbsp;=&nbsp;document.createElement(&#39;button&#39;);
&nbsp;&nbsp;btn.appendChild(document.createTextNode(&#39;Button&nbsp;&#39;&nbsp;+&nbsp;i));
&nbsp;&nbsp;btn.addEventListener(&#39;click&#39;,&nbsp;function()&nbsp;{&nbsp;console.log(i);&nbsp;});
&nbsp;&nbsp;document.body.appendChild(btn);
});</pre><p><br/></p><p>题干=</p><p>下面的代码将输出什么到控制台，为什么？</p><pre class="brush:js;toolbar:false">var&nbsp;arr1&nbsp;=&nbsp;&quot;john&quot;.split(&#39;&#39;);
var&nbsp;arr2&nbsp;=&nbsp;arr1.reverse();
var&nbsp;arr3&nbsp;=&nbsp;&quot;jones&quot;.split(&#39;&#39;);
arr2.push(arr3);
console.log(&quot;array&nbsp;1:&nbsp;length=&quot;&nbsp;+&nbsp;arr1.length&nbsp;+&nbsp;&quot;&nbsp;last=&quot;&nbsp;+&nbsp;arr1.slice(-1));
console.log(&quot;array&nbsp;2:&nbsp;length=&quot;&nbsp;+&nbsp;arr2.length&nbsp;+&nbsp;&quot;&nbsp;last=&quot;&nbsp;+&nbsp;arr2.slice(-1));</pre><p>答案=</p><p>输出结果是：</p><pre class="brush:js;toolbar:false">&quot;array&nbsp;1:&nbsp;length=5&nbsp;last=j,o,n,e,s&quot;
&quot;array&nbsp;2:&nbsp;length=5&nbsp;last=j,o,n,e,s&quot;</pre><p>arr1 和 arr2 在上述代码执行之后，两者相同了，原因是：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;调用数组对象的 reverse() 方法并不只返回反顺序的阵列，它也反转了数组本身的顺序（即，在这种情况下，指的是 arr1）。<br/></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;reverse() 方法返回一个到数组本身的引用（在这种情况下即，arr1）。其结果为，arr2 仅仅是一个到 arr1的引用（而不是副本）。因此，当对 arr2做了任何事情（即当我们调用 arr2.push(arr3);）时，arr1 也会受到影响，因为 arr1 和 arr2 引用的是同一个对象。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;这里有几个侧面点有时候会让你在回答这个问题时，阴沟里翻船：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;传递数组到另一个数组的 push() 方法会让整个数组作为单个元素映射到数组的末端。其结果是，语句 arr2.push(arr3); 在其整体中添加 arr3 作为一个单一的元素到 arr2 的末端（也就是说，它并没有连接两个数组，连接数组是 concat() 方法的目的）。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;和Python一样，JavaScript标榜数组方法调用中的负数下标，例如 slice() 可作为引用数组末尾元素的方法：例如，-1下标表示数组中的最后一个元素，等等。<br/></p><p><br/></p><p>题干=</p><p>下面的代码将输出什么到控制台，为什么？</p><pre class="brush:js;toolbar:false">console.log(1&nbsp;+&nbsp;&nbsp;&quot;2&quot;&nbsp;+&nbsp;&quot;2&quot;);
console.log(1&nbsp;+&nbsp;&nbsp;+&quot;2&quot;&nbsp;+&nbsp;&quot;2&quot;);
console.log(1&nbsp;+&nbsp;&nbsp;-&quot;1&quot;&nbsp;+&nbsp;&quot;2&quot;);
console.log(+&nbsp;&quot;1&quot;&nbsp;+&nbsp;&nbsp;&quot;1&quot;&nbsp;+&nbsp;&quot;2&quot;);
console.log(+&nbsp;1&nbsp;+&nbsp;&nbsp;1&nbsp;+&nbsp;&quot;2&quot;);
console.log(&nbsp;&quot;A&quot;&nbsp;-&nbsp;&quot;B&quot;&nbsp;+&nbsp;&quot;2&quot;);
console.log(&nbsp;&quot;A&quot;&nbsp;-&nbsp;&quot;B&quot;&nbsp;+&nbsp;2);</pre><p>答案=</p><p>上面的代码将输出以下内容到控制台：</p><pre class="brush:js;toolbar:false">&quot;122&quot;
&quot;32&quot;
&quot;02&quot;
&quot;112&quot;
&quot;22&quot;
&quot;NaN2&quot;
NaN</pre><p>原因是…</p><p>&nbsp;&nbsp;&nbsp;&nbsp;这里的根本问题是，JavaScript（ECMAScript）是一种弱类型语言，它可对值进行自动类型转换，以适应正在执行的操作。让我们通过上面的例子来说明这是如何做到的。<br/></p><p>&nbsp;&nbsp;&nbsp;&nbsp;例1：1 + &quot;2&quot; + &quot;2&quot; 输出：&quot;122&quot; 说明： 1 + &quot;2&quot; 是执行的第一个操作。由于其中一个运算对象（&quot;2&quot;）是字符串，JavaScript会假设它需要执行字符串连接，因此，会将 1 的类型转换为 &quot;1&quot;， 1 + &quot;2&quot;结果就是 &quot;12&quot;。然后， &quot;12&quot; + &quot;2&quot; 就是 &quot;122&quot;。<br/></p><p>&nbsp;&nbsp;&nbsp;&nbsp;例2： 1 + +&quot;2&quot; + &quot;2&quot; 输出： &quot;32&quot; 说明：根据运算的顺序，要执行的第一个运算是 +&quot;2&quot;（第一个 &quot;2&quot; 前面的额外 + 被视为一元运算符）。因此，JavaScript将 &quot;2&quot; 的类型转换为数字，然后应用一元 + 号（即，将其视为一个正数）。其结果是，接下来的运算就是 1 + 2 ，这当然是 3。然后我们需要在一个数字和一个字符串之间进行运算（即， 3 和 &quot;2&quot;），同样的，JavaScript会将数值类型转换为字符串，并执行字符串的连接，产生 &quot;32&quot;。<br/></p><p>&nbsp;&nbsp;&nbsp;&nbsp;例3： 1 + -&quot;1&quot; + &quot;2&quot; 输出： &quot;02&quot;&nbsp; 说明：这里的解释和前一个例子相同，除了此处的一元运算符是 - 而不是 +。先是 &quot;1&quot; 变为 1，然后当应用 - 时又变为了 -1 ，然后将其与 1相加，结果为 0，再将其转换为字符串，连接最后的 &quot;2&quot; 运算对象，得到 &quot;02&quot;。<br/></p><p>&nbsp;&nbsp;&nbsp;&nbsp;例4： +&quot;1&quot; + &quot;1&quot; + &quot;2&quot; 输出： &quot;112&quot; 说明：虽然第一个运算对象 &quot;1&quot;因为前缀的一元 + 运算符类型转换为数值，但又立即转换回字符串，当连接到第二个运算对象 &quot;1&quot; 的时候，然后又和最后的运算对象&quot;2&quot; 连接，产生了字符串 &quot;112&quot;。<br/></p><p>&nbsp;&nbsp;&nbsp;&nbsp;例5： &quot;A&quot; - &quot;B&quot; + &quot;2&quot; 输出： &quot;NaN2&quot; 说明：由于运算符 -&nbsp; 不能被应用于字符串，并且 &quot;A&quot; 和 &quot;B&quot; 都不能转换成数值，因此，&quot;A&quot; - &quot;B&quot;的结果是 NaN，然后再和字符串 &quot;2&quot; 连接，得到 &quot;NaN2&quot; 。<br/></p><p>&nbsp;&nbsp;&nbsp;&nbsp;例6： &quot;A&quot; - &quot;B&quot; + 2 输出： NaN 说明：参见前一个例子， &quot;A&quot; - &quot;B&quot; 结果为 NaN。但是，应用任何运算符到NaN与其他任何的数字运算对象，结果仍然是 NaN。<br/></p><p><br/></p><p>题干=</p><p>下面的递归代码在数组列表偏大的情况下会导致堆栈溢出。在保留递归模式的基础上，你怎么解决这个问题？</p><pre class="brush:js;toolbar:false">var&nbsp;list&nbsp;=&nbsp;readHugeList();
&nbsp;
var&nbsp;nextListItem&nbsp;=&nbsp;function()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;item&nbsp;=&nbsp;list.pop();
&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(item)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;process&nbsp;the&nbsp;list&nbsp;item...
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nextListItem();
&nbsp;&nbsp;&nbsp;&nbsp;}
};</pre><p>答案=</p><p>&nbsp;&nbsp;&nbsp;&nbsp;潜在的堆栈溢出可以通过修改nextListItem 函数避免：</p><pre class="brush:js;toolbar:false">var&nbsp;list&nbsp;=&nbsp;readHugeList();
&nbsp;
var&nbsp;nextListItem&nbsp;=&nbsp;function()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;item&nbsp;=&nbsp;list.pop();
&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(item)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;process&nbsp;the&nbsp;list&nbsp;item...
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setTimeout(&nbsp;nextListItem,&nbsp;0);
&nbsp;&nbsp;&nbsp;&nbsp;}
};</pre><p>&nbsp;&nbsp;&nbsp;&nbsp;堆栈溢出之所以会被消除，是因为事件循环操纵了递归，而不是调用堆栈。当 nextListItem 运行时，如果 item不为空，timeout函数（nextListItem）就会被推到事件队列，该函数退出，因此就清空调用堆栈。当事件队列运行其timeout事件，且进行到下一个 item 时，定时器被设置为再次调用 nextListItem。因此，该方法从头到尾都没有直接的递归调用，所以无论迭代次数的多少，调用堆栈保持清空的状态。</p><p><br/></p><p>题干=</p><p>以下代码行将输出什么到控制台？<br/></p><pre class="brush:js;toolbar:false">console.log(&quot;0&nbsp;||&nbsp;1&nbsp;=&nbsp;&quot;+(0&nbsp;||&nbsp;1));
console.log(&quot;1&nbsp;||&nbsp;2&nbsp;=&nbsp;&quot;+(1&nbsp;||&nbsp;2));
console.log(&quot;2&nbsp;||&nbsp;1&nbsp;=&nbsp;&quot;+(2&nbsp;||&nbsp;1));
console.log(&quot;0&nbsp;&amp;&amp;&nbsp;1&nbsp;=&nbsp;&quot;+(0&nbsp;&amp;&amp;&nbsp;1));
console.log(&quot;1&nbsp;&amp;&amp;&nbsp;2&nbsp;=&nbsp;&quot;+(1&nbsp;&amp;&amp;&nbsp;2));</pre><p>并解释。</p><p>答案=</p><p>该代码将输出：</p><pre class="brush:js;toolbar:false">0&nbsp;||&nbsp;1&nbsp;=&nbsp;1
1&nbsp;||&nbsp;2&nbsp;=&nbsp;1
2&nbsp;||&nbsp;1&nbsp;=&nbsp;2
0&nbsp;&amp;&amp;&nbsp;1&nbsp;=&nbsp;0
1&nbsp;&amp;&amp;&nbsp;2&nbsp;=&nbsp;2</pre><p>&nbsp;&nbsp;&nbsp;&nbsp;在JavaScript中， || 和 &amp;&amp;都是逻辑运算符，用于在从左至右计算时，返回第一个可完全确定的“逻辑值”。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;或（ || ）运算符。在形如 X||Y的表达式中，首先计算X 并将其解释执行为一个布尔值。如果这个布尔值true，那么返回true（1），不再计算 Y，因为“或”的条件已经满足。如果这个布尔值为false，那么我们仍然不能知道 X||Y是真是假，直到我们计算 Y，并且也把它解释执行为一个布尔值。<br/></p><p>&nbsp;&nbsp;&nbsp;&nbsp;因此， 0 || 1 的计算结果为true（1），同理计算1 || 2。<br/></p><p>&nbsp;&nbsp;&nbsp;&nbsp;与（ &amp;&amp;）运算符。在形如 X&amp;&amp;Y的表达式中，首先计算 X并将其解释执行为一个布尔值。如果这个布尔值为 false，那么返回 false（0），不再计算 Y，因为“与”的条件已经失败。如果这个布尔值为true，但是，我们仍然不知道 X&amp;&amp;Y 是真是假，直到我们去计算 Y，并且也把它解释执行为一个布尔值。<br/></p><p>&nbsp;&nbsp;&nbsp;&nbsp;不过，关于 <span style="text-decoration: underline;">&amp;&amp;运算符</span>有趣的地方在于，<span style="text-decoration: underline;">当一个表达式计算为“true”的时候，那么就返回表达式本身</span>。这很好，虽然它在逻辑表达式方面计算为“真”，但如果你希望的话也可用于返回该值。这就解释了为什么，有些令人奇怪的是， 1 &amp;&amp; 2返回 2（而不是你以为的可能返回 true 或 1）。<br/></p><p><br/></p><p>题干=</p><p>执行下面的代码时将输出什么？请解释。</p><p>console.log(false == &#39;0&#39;)</p><p>console.log(false === &#39;0&#39;)</p><p>答案=</p><p>代码将输出：</p><p>true</p><p>false</p><p>&nbsp;&nbsp;&nbsp;&nbsp;在JavaScript中，有两种等式运算符。三个等于运算符 === 的作用类似传统的等于运算符：如果两侧的表达式有着相同的类型和相同的值，那么计算结果为true。而双等于运算符，会只强制比较它们的值。因此，总体上而言，使用 ===而不是 ==的做法更好。 !==vs !=亦是同理。</p><p><br/></p><p>题干=</p><p>以下代码将输出什么？并解释你的答案。</p><pre class="brush:js;toolbar:false">var&nbsp;a={},
&nbsp;&nbsp;&nbsp;&nbsp;b={key:&#39;b&#39;},
&nbsp;&nbsp;&nbsp;&nbsp;c={key:&#39;c&#39;};
&nbsp;
a[b]=123;
a[c]=456;
&nbsp;
console.log(a[b]);</pre><p>答案=</p><p>&nbsp;&nbsp;&nbsp;&nbsp;这段代码将输出 456（而不是 123）。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;原因为：当设置对象属性时，JavaScript会暗中字符串化参数值。在这种情况下，由于 b 和 c都是对象，因此它们都将被转换为&quot;[object Object]&quot;。结果就是， a[b]和a[c]均相当于a[&quot;[object Object]&quot;] ，并可以互换使用。因此，设置或引用 a[c]和设置或引用 a[b]完全相同。</p><p><br/></p><p>题干=</p><p>以下代码行将输出什么到控制台？</p><p>console.log((function f(n){return ((n &gt; 1) ? n * f(n-1) : n)})(10));</p><p>并解释你的答案。</p><p>答案=</p><p>&nbsp;&nbsp;&nbsp;&nbsp;代码将输出10！的值（即10！或3628800）。<br/></p><p>&nbsp;&nbsp;&nbsp;&nbsp;原因是：<br/></p><p>&nbsp;&nbsp;&nbsp;&nbsp;命名函数 f()递归地调用本身，当调用 f(1)的时候，只简单地返回1。下面就是它的调用过程：</p><pre class="brush:js;toolbar:false">f(1):&nbsp;returns&nbsp;n,&nbsp;which&nbsp;is&nbsp;1
f(2):&nbsp;returns&nbsp;2&nbsp;*&nbsp;f(1),&nbsp;which&nbsp;is&nbsp;2
f(3):&nbsp;returns&nbsp;3&nbsp;*&nbsp;f(2),&nbsp;which&nbsp;is&nbsp;6
f(4):&nbsp;returns&nbsp;4&nbsp;*&nbsp;f(3),&nbsp;which&nbsp;is&nbsp;24
f(5):&nbsp;returns&nbsp;5&nbsp;*&nbsp;f(4),&nbsp;which&nbsp;is&nbsp;120
f(6):&nbsp;returns&nbsp;6&nbsp;*&nbsp;f(5),&nbsp;which&nbsp;is&nbsp;720
f(7):&nbsp;returns&nbsp;7&nbsp;*&nbsp;f(6),&nbsp;which&nbsp;is&nbsp;5040
f(8):&nbsp;returns&nbsp;8&nbsp;*&nbsp;f(7),&nbsp;which&nbsp;is&nbsp;40320
f(9):&nbsp;returns&nbsp;9&nbsp;*&nbsp;f(8),&nbsp;which&nbsp;is&nbsp;362880
f(10):&nbsp;returns&nbsp;10&nbsp;*&nbsp;f(9),&nbsp;which&nbsp;is&nbsp;3628800</pre><p><br/></p><p>题干=</p><p>下面的代码将输出什么到控制台，为什么：<br/></p><pre class="brush:js;toolbar:false">var&nbsp;hero&nbsp;=&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;_name:&nbsp;&#39;John&nbsp;Doe&#39;,
&nbsp;&nbsp;&nbsp;&nbsp;getSecretIdentity:&nbsp;function&nbsp;(){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;this._name;
&nbsp;&nbsp;&nbsp;&nbsp;}
};
&nbsp;
var&nbsp;stoleSecretIdentity&nbsp;=&nbsp;hero.getSecretIdentity;
&nbsp;
console.log(stoleSecretIdentity());
console.log(hero.getSecretIdentity());</pre><p>代码有什么问题，以及应该如何修复？</p><p>答案=</p><p>&nbsp;&nbsp;&nbsp;&nbsp;代码将输出：</p><pre class="brush:js;toolbar:false">undefined
John&nbsp;Doe</pre><p>&nbsp;&nbsp;&nbsp;&nbsp;第一个 console.log之所以输出 undefined，是因为我们正在从 hero对象提取方法，所以调用了全局上下文中（即窗口对象）的 stoleSecretIdentity()，而在此全局上下文中， _name属性不存在。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;其中一种修复stoleSecretIdentity() 函数的方法如下：</p><pre class="brush:js;toolbar:false">var&nbsp;stoleSecretIdentity&nbsp;=&nbsp;hero.getSecretIdentity.bind(hero);</pre><p><br/></p>