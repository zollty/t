<p>题干=</p><p>Redis有哪些高可用方案？它们有什么区别？</p><p>答案=</p><p>Redis-Sentinel 和 Redis Cluster，前者参见：<a href="http://redis.io/topics/sentinel">http://redis.io/topics/sentinel</a> </p><p><br/></p><p>题干=<br/></p><p>Redis3官方集群的原理</p><p>答案=</p><p>3.0版本之前的redis是不支持集群的，那个时候，做Redis集群，就要借助一个中间件，负责将需要存入Redis的数据的key通过一套算法计算出一个值，根据这个值找到对应的Redis节点存入数据。</p><p>官方集群原理：每个Redis主节点都标记为 0~16383之间的一个数字，叫做16384个slot(槽)。当动态添加或减少node节点时，需要将16384个槽做个再分配，槽中的键值也要迁移。但是这一过程，在目前实现中，还处于半自动状态，需要人工介入。</p><p>Redis集群，要保证16384个槽对应的node都正常工作，如果某个node发生故障，那它负责的slots也就失效，整个集群将不能工作。</p><p>为了增加集群的可访问性，官方推荐的方案是将node配置成主从结构，即一个master主节点，挂n个slave从节点。这时，如果主节点失效，Redis Cluster会根据选举算法从slave节点中选择一个上升为主节点，整个集群继续对外提供服务。</p><p>节点之间通过互相的ping-pong判断是否节点可以连接上。如果有一半以上的节点去ping一个节点的时候没有回应，集群就认为这个节点宕机了，然后去连接它的备用节点（当某个Master节点失效时，集群能将核实的Slave提升为Master）。如果某个节点和所有从节点全部挂掉，我们集群就进入fail状态。还有就是如果有一半以上的主节点宕机（无论是否有slave），那么我们集群同样进入fail状态。这就是我们的redis的投票机制。</p><p>Redis集群的创建官方使用了一个ruby脚本：例如</p><p><span style="color: rgb(192, 0, 0);">./redis-trib.rb&nbsp;create&nbsp;-- replicas&nbsp;1</span>&nbsp;172.16.1.167:7000&nbsp;172.16.1.167:7001&nbsp;172.16.1.168:7000&nbsp;172.16.1.168:7001&nbsp;172.16.1.169:7000&nbsp;172.16.1.169:7001</p><p>这个参数<span style="color: rgb(192, 0, 0);"> --replicas 1</span>代表只分配一个slave，后面跟了6个HOST:PORT对，至于Master和Slave的分配，是根据redis-trib.rb程序里面的算法自动计算的，</p><p>分配的算法大致如下：</p><p>先把节点按照host分类，这样保证master节点能分配到更多的主机中。</p><p>为master分配slave，分配算法会尽量保证master和slave节点不在同一台主机上。</p><p>各节点定时会将这些信息发送给其他节点：</p><p>1fc24...2727b 10.9.42.37:6103 master - 0 1494082584680 9 connected 10923-13652</p><p>08e7....b38cd 10.9.33.204:6202 slave ad133.....a038 0 1494082586686 8 connected</p><p>edaa.....9085 10.9.33.204:6203 slave 1fc2.....727b 0 1494082586184 9 connected</p><p>06cd.....909d 10.9.33.204:6201 slave d45.....374e 0 1494082584179 7 connected</p><p>3892.....e843 10.9.42.37:6203 slave 73f7.....ecfa0 0 1494082582679 12 connected</p><p>73f7......44fa0 10.9.33.204:6103 master - 0 1494082585181 3 connected 13653-16383</p><p>400.......0cd60 10.9.33.204:6101 master - 0 1494082583678 1 connected 2731-5460</p><p>d45.......8774e 10.9.42.37:6101 master - 0 1494082588189 7 connected 0-2730</p><p>f881........f7107 10.9.42.37:6201 slave 4004.....cd60 0 1494082587187 10 connected</p><p>45b........2cdf 10.9.33.204:6102 master - 0 1494082583179 2 connected 8192-10922</p><p>007d.....65686 10.9.42.37:6202 slave 45ba....92cdf 0 1494082588189 11 connected</p><p>ad13.....a038 10.9.42.37:6102 myself,master - 0 0 8 connected 5461-8191</p><p>从左至右分别是：节点ID、IP地址和端口，节点角色标志、最后发送ping时间、最后接收到pong时间、连接状态、节点负责处理的hash slot。集群可以自动识别出ip/port的变化，并通过Gossip协议（最终一致性\分布式服务数据同步算法）广播给其他节点知道。Gossip也称“病毒感染算法”、“谣言传播算法”。</p><p>集群管理（redis-trib.rb）具体参见</p><p><a href="http://blog.csdn.net/huwei2003/article/details/50973967">http://blog.csdn.net/huwei2003/article/details/50973967</a> </p><p><br/></p>