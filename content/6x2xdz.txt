<p>题干=</p><p>说一说你对AOP和IoC的理解。</p><p>答案=</p><p>IoC即控制反转(Inversion of Control)，也可以叫做DI(依赖注入)，是一种程序设计的思想。简单说就是把类的依赖关系解耦，类不再直接依赖另一个类的实现，而是依赖于接口，具体的实现类由控制器集中管理。AOP即面向切面编程(Aspect Oriented Programming)，所谓的切面(Aspect)就是各个方面，将程序逻辑划分成许多部分，比如许多的类和方法，面向切面编程，就是面向类和方法的编程，给类和方法增加一些辅助功能。比如我们要记录工程中所有类的方法的调用次数和执行时间，或者记录session级别的某些方法的调用情况并监控返回结果，或者将某些方法串在一个事务里面执行，这种就是面向切面编程。通常采用动态代理和静态代理预编译的方式实现对类和方法的增强。关于面向切面编程有一个AspectJ实现，定义了Aspect、Jiont-point、Point-cut、Advice、Target 五个概念。</p><p><br/></p><p>题干=</p><p>什么是AspectJ，它定义了哪几个核心概念？</p><p>答案=</p><p>AspectJ定义了Aspect、Jiont-point、Point-cut、Advice、Target 五个概念。</p><ul class=" list-paddingleft-2" style="list-style-type: disc;"><li><p><strong>Point-cut</strong>：是一个（组）基于正则表达式的表达式。通常一个Point-cut，会选取程序中的某些我们感兴趣的执行点或者程序执行点的集合。</p></li><li><p><strong>Join-point</strong>：通过&nbsp;Point-cut选取出来的集合中的具体的一个执行点，我们就叫Join-point。</p></li><li><p><strong>Advice</strong>：在选取出来的Join-point上要执行的操作、逻辑。有５种类型，Before、After、Around、Throws Advice（抛出增强）、Introduction Advice（引入增强，对类增强）。</p></li><li><p><strong>Aspect</strong>：就是我们关注点的模块化。这个关注点可能会横切多个对象和模块，事务管理是横切关注点的很好的例子。它是一个抽象的概念，从软件的角度来说是指在应用程序不同模块中的某一个领域或方面。由Point-cut 和Advice组成。</p></li><li><p><strong>Target</strong>：被aspectj横切的对象。我们所说的joinPoint就是Target的某一行，如方法开始执行的地方、方法类调用某个其他方法的代码。</p></li></ul><p><br/></p>