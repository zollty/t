<p>题干=</p><p>Java&nbsp;Class文件的加载过程是怎样的？&nbsp; ClassLoader的加载顺序是怎样？</p><p>答案=</p><p>1、将类装入JVM中</p><p>在Java中，类装载器把一个类装入JVM中，要经过以下步骤：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(1)&nbsp;装载：查找和导入Class文件；</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(2)&nbsp;链接：把类的二进制数据合并到JRE中；</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;校验：检查载入Class文件数据的正确性；</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;准备：给类的静态变量分配存储空间；</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;解析：将符号引用转成直接引用；（常量池解析）</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(3)&nbsp;初始化：对类的静态变量，静态代码块执行初始化操作</p><p>2、通过ClassLoader加载类</p><p>&nbsp;&nbsp;&nbsp;&nbsp;1）Bootstrap&nbsp;ClassLoader</p><p>&nbsp;&nbsp;&nbsp;&nbsp;负责加载$JAVA_HOME中jre/lib/rt.jar里所有的class，由C++实现，不是ClassLoader子类</p><p>&nbsp;&nbsp;&nbsp;&nbsp;2）Extension&nbsp;ClassLoader</p><p>&nbsp;&nbsp;&nbsp;&nbsp;负责加载java平台中扩展功能的一些jar包，包括$JAVA_HOME中jre/lib/*.jar或-Djava.ext.dirs指定目录下的jar包</p><p>&nbsp;&nbsp;&nbsp;&nbsp;3）App&nbsp;ClassLoader</p><p>&nbsp;&nbsp;&nbsp;&nbsp;负责记载classpath中指定的jar包及目录中class</p><p>&nbsp;&nbsp;&nbsp;&nbsp;4）Custom&nbsp;ClassLoader</p><p><br/></p><p>题干=<br/></p><p>Java程序中，报了一个错：</p><p>java.lang.ClassCastException: <span style="color: rgb(192, 0, 0);">com.zollty.Session</span> cannot be cast to <span style="color: rgb(192, 0, 0);">com.zollty.Session</span></p><p>，两个类型完全一样的类，却无法转换，为什么？</p><p>答案=</p><p>打印出ClassLoader，如下：</p><p>ExtSimpleSession.class.getClassLoader() &nbsp;= org.springframework.boot.<span style="color: rgb(192, 0, 0);">devtools.restart.classloader</span><span style="color: rgb(192, 0, 0);">.RestartClassLoader</span>@303eb613</p><p>session.getClass().getClassLoader() = <span style="color: rgb(192, 0, 0);">sun.misc.Launcher$AppClassLoader</span>@18b4aac2</p><p>所以原因是 spring boot 的 devtools的类动态热加载引起的。</p><p><br/></p>