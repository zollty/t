<p><strong>题干=</strong><br/></p><p>实现简单的“文本模糊搜索”，例如：搜索语句 “你快乐，我随意”，可以匹配到 文本 “你想快乐我随意”，以及“我随意，你快乐”。</p><p><br/></p><p>匹配规则：1）按字或者英文单词拆分，不考虑字/词的顺序，只要单向匹配70%就行（四舍五入，如果小于4则需要全部的词都匹配），且不考虑跨行。</p><p>例如：</p><p>3个字，需要3个字；</p><p>4个字，只需要匹配28%，即3个字即可；</p><p>5个字，只需要匹配35%，即4个字即可；</p><p>6个字，只需要匹配42%，即4个字即可；</p><p>例如：</p><p>搜索语句 “匹配规则” —————— 文本： “xx匹配，拆分规则”</p><p>可以匹配，文本中100%包含 “匹、配、规、则”，</p><p><br/></p><p>而下面的文本：</p><p>搜索语句 “什么是甜” —————— 文本： “知道`什`么#是$苦%……Z，&amp;那*()”</p><p>可以匹配，“什么是甜”共4个字，只需要匹配其中任意3个字即可，文本中包括了“什么是”三个字，故满足匹配要求。</p><p><br/></p><p>补充说明：</p><p><br/></p><p>可以假设 输入的搜索语句，都是正常的字或英文单词（不包括任何其他字符）</p><p><br/></p><p>但如果能考虑到如下特殊情况会更好：<br/></p><p>1）忽略搜索语句中的非单词、非汉字（例如空格、标点符号等），</p><p>例如，下面几个 搜索语句 是等价的：</p><p>“你快乐&nbsp; &nbsp;碧いうさぎ”</p><p>“你快乐，碧いうさぎ”</p><p>“你快乐,,碧いうさぎ”</p><p>注意，下面两个不等价：</p><p>台视Star blue蓝星</p><p>台视Starblue蓝星</p><p>即，不能把英文单词连起来。“M2M-PRETTY BOY”也不能变成 “M2MPRETTY BOY”。</p><p>2）特例：</p><p>例如 “it&#39;s only the fairy tale”，将单词it&#39;s中的 标点符号，视为一体（不忽略）。</p><p>例如 “S.H.E”，视为一体。</p><p><br/></p><p><strong>答案=</strong></p><p>如下</p><pre class="brush:java;toolbar:false">/**
&nbsp;*&nbsp;
&nbsp;*/
package&nbsp;com.zollty.tools.file;

import&nbsp;java.util.Arrays;
import&nbsp;java.util.HashSet;
import&nbsp;java.util.LinkedList;
import&nbsp;java.util.List;
import&nbsp;java.util.Set;

import&nbsp;org.jretty.util.StringSplitUtils;
import&nbsp;org.jretty.util.StringUtils;

/**
&nbsp;*&nbsp;@author&nbsp;zollty
&nbsp;*&nbsp;@since&nbsp;2019年4月1日
&nbsp;*/
public&nbsp;class&nbsp;FuzzySearch&nbsp;{

&nbsp;&nbsp;&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;目前这个算法的不足之处：
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;1）会将“S.H.E&nbsp;-&nbsp;魔力”，视为&nbsp;“S&nbsp;H&nbsp;E&nbsp;魔&nbsp;力”，将“it&#39;s”&nbsp;视为“it&nbsp;s”，如果有这种单词存在，可能有小概率会误判
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;List&lt;String&gt;&nbsp;fuzzySearch(String&nbsp;input,&nbsp;List&lt;String&gt;&nbsp;text)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;in&nbsp;=&nbsp;normalSentence(input);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String[]&nbsp;words&nbsp;=&nbsp;StringSplitUtils.split(in,&nbsp;&#39;&nbsp;&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;使用Set去重
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set&lt;String&gt;&nbsp;wordsSet&nbsp;=&nbsp;new&nbsp;HashSet&lt;String&gt;(Arrays.asList(words));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;匹配70%以上的字/词（如果小于4，则要求&nbsp;全词匹配）
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;long&nbsp;min;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(wordsSet.size()&nbsp;&lt;&nbsp;4)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min&nbsp;=&nbsp;wordsSet.size();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min&nbsp;=&nbsp;Math.round(wordsSet.size()&nbsp;*&nbsp;0.7);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;例如&nbsp;“尖尖角”，去重后，必须匹配2个字&nbsp;[&quot;尖&quot;，&quot;角&quot;]
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List&lt;String&gt;&nbsp;ret&nbsp;=&nbsp;new&nbsp;LinkedList&lt;String&gt;();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(String&nbsp;str:&nbsp;text)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(matchStr(str,&nbsp;wordsSet,&nbsp;min))&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret.add(str);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;ret;
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;匹配70%以上的字/词即可（如果小于4，则要求&nbsp;全词匹配），
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;不考虑顺序（“你快乐，我随意”&nbsp;可以匹配到&nbsp;“我随意，你快乐”），
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;不考虑&nbsp;单词大小写
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;static&nbsp;boolean&nbsp;matchStr(String&nbsp;str,&nbsp;Set&lt;String&gt;&nbsp;words,&nbsp;long&nbsp;min)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;long&nbsp;n&nbsp;=&nbsp;0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(String&nbsp;word:&nbsp;words)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;忽略大小写
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(StringUtils.containsIgnoreCase(str,&nbsp;word))&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n++;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(n&gt;=min)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;String&nbsp;normalSentence(String&nbsp;input)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;ret&nbsp;=&nbsp;input;
//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret&nbsp;=&nbsp;preProcess(ret);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret&nbsp;=&nbsp;clearAllSymbols(ret);
//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;清除所有符号:&nbsp;&quot;&nbsp;+&nbsp;ret);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret&nbsp;=&nbsp;addBlankSpaceBetweenWords(ret);
//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;添加字间空格:&nbsp;&quot;&nbsp;+&nbsp;ret);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret&nbsp;=&nbsp;clearSeriesSpacesAndTabs(ret);
//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;清除连续空白符:&nbsp;&quot;&nbsp;+&nbsp;ret);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;ret;
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;预处理
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;String&nbsp;preProcess(String&nbsp;input)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;null;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;清除所有符号
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;String&nbsp;clearAllSymbols(String&nbsp;input)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;input.replaceAll(&quot;[\\pP\\p{Punct}]&quot;,&quot;&nbsp;&quot;);&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;清除所有符号,只留下字母&nbsp;数字&nbsp;字&nbsp;&nbsp;共3类
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;清除连续空白符
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;String&nbsp;clearSeriesSpacesAndTabs(String&nbsp;ret)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret&nbsp;=&nbsp;StringUtils.replace(ret,&nbsp;&quot;\t&quot;,&nbsp;&quot;&nbsp;&quot;);&nbsp;//&nbsp;将制表符&nbsp;替换成空格
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret&nbsp;=&nbsp;ret.replaceAll(&quot;[&nbsp;]+&quot;,&nbsp;&quot;&nbsp;&quot;);&nbsp;//&nbsp;将连续的空格&nbsp;替换成单个空格
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;ret;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;添加字间空格
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;String&nbsp;addBlankSpaceBetweenWords(String&nbsp;input)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StringBuilder&nbsp;sbu&nbsp;=&nbsp;new&nbsp;StringBuilder();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;input.length();&nbsp;i++)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char&nbsp;c&nbsp;=&nbsp;input.charAt(i);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sbu.append(c);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(isDW(c)&nbsp;&amp;&amp;&nbsp;(i&nbsp;+&nbsp;1&nbsp;&lt;&nbsp;input.length())&nbsp;&amp;&amp;&nbsp;isDW(input.charAt(i&nbsp;+&nbsp;1)))&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sbu.append(&#39;&nbsp;&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;sbu.substring(0,&nbsp;sbu.length()&nbsp;-&nbsp;1);
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;是否为数字或字母
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;boolean&nbsp;isDW(char&nbsp;c)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(c&nbsp;&gt;=&nbsp;&#39;a&#39;&nbsp;&amp;&amp;&nbsp;c&nbsp;&lt;=&nbsp;&#39;z&#39;)&nbsp;||&nbsp;(c&nbsp;&gt;=&nbsp;&#39;A&#39;&nbsp;&amp;&amp;&nbsp;c&nbsp;&lt;=&nbsp;&#39;Z&#39;)&nbsp;||&nbsp;(c&nbsp;&gt;=&nbsp;&#39;0&#39;&nbsp;&amp;&amp;&nbsp;c&nbsp;&lt;=&nbsp;&#39;9&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(normalSentence(&quot;ss&amp;*(,.~1如果@&amp;(^-自己!!知道`什`么#是$苦%……Z，&amp;那*()么一-=定——+告诉::;\&quot;&#39;/?.,&gt;&lt;[]{}\\||别人什么是甜。&quot;));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;normalSentence(&quot;测试：如&nbsp;果\t123&nbsp;S.H.E&nbsp;-&nbsp;it&#39;s&nbsp;only&nbsp;the&nbsp;fairy&nbsp;tale&nbsp;碧&nbsp;&nbsp;&nbsp;&nbsp;いうさぎlove&nbsp;coding我&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(normalSentence(&quot;M2M-PRETTY&nbsp;BOY&quot;));
//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(fuzzySearch(&quot;你快乐，我随意&quot;,&nbsp;Arrays.asList(&quot;我随意，你快乐，啊啊啊啊&quot;)));
//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(fuzzySearch(&quot;什-么&nbsp;是&amp;&amp;甜&quot;,&nbsp;Arrays.asList(&quot;知道`什`么#是$苦%……Z，&amp;那*()&quot;)));
//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(fuzzySearch(&quot;M2M-PRETTY&nbsp;BOY&quot;,&nbsp;Arrays.asList(&quot;M2M&nbsp;-&nbsp;Pretty&nbsp;Boy&quot;)));
&nbsp;&nbsp;&nbsp;&nbsp;}

}</pre><p><br/></p>