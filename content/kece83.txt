<p>题干=</p><p>JDK 1.8 有哪些新特性？</p><p>答案=</p><p>一、接口定义的增强：从JDK1.8开始允许在接口中定义普通方法，使用default和static关键字，跟在访问修饰符之后，两种的区别是，default定义的普通方法用对象调用，static定义的方法用接口名调用。</p><p>二、JDK1.8中还有一个重要概念，内部类访问方法变量的时候可以不用加上final关键字。</p><p>三、Lambda 表达式（取代传统的匿名对象方式）</p><pre class="brush:java;toolbar:false">List&lt;String&gt;&nbsp;names&nbsp;=&nbsp;Arrays.asList(&quot;peter&quot;,&nbsp;&quot;anna&quot;,&nbsp;&quot;mike&quot;,&nbsp;&quot;xenia&quot;);
Collections.sort(names,&nbsp;new&nbsp;Comparator&lt;String&gt;()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;@Override
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;int&nbsp;compare(String&nbsp;a,&nbsp;String&nbsp;b)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;b.compareTo(a);
&nbsp;&nbsp;&nbsp;&nbsp;}
});
Collections.sort(names,&nbsp;(String&nbsp;a,&nbsp;String&nbsp;b)&nbsp;-&gt;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;b.compareTo(a);
});</pre><p>看到了吧，代码变得更段且更具有可读性，但是实际上还可以写得更短：</p><p>复制代码 代码如下:</p><pre class="brush:java;toolbar:false">Collections.sort(names,&nbsp;(String&nbsp;a,&nbsp;String&nbsp;b)&nbsp;-&gt;&nbsp;b.compareTo(a));</pre><p>对于函数体只有一行代码的，你可以去掉大括号{}以及return关键字，但是你还可以写得更短点：</p><p>复制代码 代码如下:</p><pre class="brush:java;toolbar:false">Collections.sort(names,&nbsp;(a,&nbsp;b)&nbsp;-&gt;&nbsp;b.compareTo(a));</pre><p>Java编译器可以自动推导出参数类型，所以你可以不用再写一次类型。</p><p>四、Stream API</p><p>Stream，它是有关算法和计算的，它更像一个高级版本的 Iterator。具体参见：<a href="https://www.ibm.com/developerworks/cn/java/j-lo-java8streamapi/">https://www.ibm.com/developerworks/cn/java/j-lo-java8streamapi/</a> </p><p><br/></p><p>还有很多新特性，例如Predicate接口，</p><p><strong>JDK1.8其他新特性，参见</strong>：<a href="http://www.jb51.net/article/48304.htm">http://www.jb51.net/article/48304.htm</a> </p><p><br/></p><p>题干=</p><p>谈一谈你对Java8的Multiple inheritance的理解。</p><p>答案=<br/></p><p>多继承有利有弊，一直以来Java都不推荐。但是由于Java8引入了接口default方法的概念，而接口又支持多继承，所有实际上就变相支持了多继承，实际上这是一个权衡利弊的结果。多继承用的时候可能会存在很多不明确的地方，Java8做了一些规定，比如同时继承的两个类中有相同的default方法，则需要显式的重写，参见：<a href="http://www.importnew.com/16013.html">http://www.importnew.com/16013.html</a> </p><p><br/></p><p>题干=</p><p>JDK 1.7 有哪些新特性？</p><p>答案=</p><ol class=" list-paddingleft-2" style="list-style-type: decimal;"><li><p>switch中使用string；</p></li><li><p>泛型实例的创建可以通过类型推断来简化（new&nbsp;HashMap&lt;&gt;()）；&nbsp;</p></li><li><p>自动资源管理（try-with-resources&nbsp;语句）；&nbsp;</p></li><li><p>数字字面量下划线支持（数字之间可以加_）；&nbsp;</p></li><li><p>二进制字面量（0b）；</p></li><li><p>Catch多个Exception，rethrow&nbsp;exception&nbsp;改进了类型检测</p></li><li><p>*在可变参数方法中传递非具体化参数,改进编译警告和错误</p></li></ol><p>JDK 1.7特性参见：<a href="http://blog.csdn.net/czplplp_900725/article/details/37811861">http://blog.csdn.net/czplplp_900725/article/details/37811861</a> </p><p><br/></p><p><br/></p>